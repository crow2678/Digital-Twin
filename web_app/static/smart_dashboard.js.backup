/**
 * Smart Digital Twin Enterprise Dashboard
 * Advanced AI-powered interface with session continuity and intelligent guidance
 */

class SmartDigitalTwin {
    constructor() {
        this.currentAction = null;
        this.wizardStep = 1;
        this.processingTasks = new Map();
        this.memories = [];
        this.results = new Map(); // Store results for easy access
        this.insights = {};
        this.charts = {};
        this.customTitle = null;
        this.currentTaskId = null;
        this.requestTimeout = 10000; // 10 second timeout for requests
        this.collaborationApiUrl = 'http://localhost:8001'; // Collaboration API endpoint
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.initializeStatusMonitoring();
        this.loadInitialData();
        this.setupDragAndDrop();
        this.startPeriodicUpdates();
        this.initializeCollaborationIntelligence();
    }

    // Helper method for fetch with timeout
    async fetchWithTimeout(url, options = {}) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.requestTimeout);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            return response;
        } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
                throw new Error('Request timeout');
            }
            throw error;
        }
    }

    setupEventListeners() {
        // Sidebar collapse handlers
        document.querySelectorAll('.section-header').forEach(header => {
            header.addEventListener('click', () => {
                const target = header.getAttribute('data-bs-target');
                const icon = header.querySelector('.toggle-icon');
                
                // Toggle icon rotation
                setTimeout(() => {
                    const isExpanded = header.getAttribute('aria-expanded') === 'true';
                    icon.style.transform = isExpanded ? 'rotate(180deg)' : 'rotate(0deg)';
                }, 100);
            });
        });

        // File input handler
        document.getElementById('fileInput')?.addEventListener('change', (e) => {
            this.handleFileSelection(e.target.files);
        });

        // Memory search
        document.getElementById('memorySearch')?.addEventListener('input', (e) => {
            this.filterMemories(e.target.value);
        });

        // Memory filters
        document.getElementById('memoryTypeFilter')?.addEventListener('change', () => {
            this.loadMemories();
        });

        document.getElementById('memoryTimeFilter')?.addEventListener('change', () => {
            this.loadMemories();
        });
    }

    async loadInitialData() {
        try {
            await Promise.all([
                this.loadAICoaching().catch(e => console.warn('AI Coaching failed:', e)),
                this.loadProactiveSuggestions().catch(e => console.warn('Proactive Suggestions failed:', e)),
                this.loadMemories().catch(e => console.warn('Memories failed:', e)),
                this.loadStatistics().catch(e => console.warn('Statistics failed:', e)),
                this.loadBehavioralAnalytics().catch(e => console.warn('Behavioral Analytics failed:', e))
            ]);
        } catch (error) {
            console.warn('Some initial data failed to load:', error);
        }
        
        // Load section-specific data with error handling
        try {
            this.loadProcessingQueue();
        } catch (e) {
            console.warn('Processing Queue failed:', e);
        }
        
        try {
            this.loadRecentResults();
        } catch (e) {
            console.warn('Recent Results failed:', e);
        }
    }

    initializeStatusMonitoring() {
        // Check server connection
        this.checkServerStatus();
        setInterval(() => this.checkServerStatus(), 30000);
    }

    async checkServerStatus() {
        try {
            const response = await fetch('/health');
            this.updateStatusIndicator('connectionStatus', response.ok ? 'connected' : 'disconnected');
            
            if (response.ok) {
                // Check twin status
                const twinResponse = await fetch('/twin/status');
                const twinStatus = await twinResponse.json();
                this.updateStatusIndicator('twinStatus', twinStatus.status === 'available' ? 'connected' : 'warning');
                
                // Check memory status
                const memoryResponse = await fetch('/memory/status');
                const memoryStatus = await memoryResponse.json();
                this.updateStatusIndicator('memoryStatus', memoryStatus.status === 'available' ? 'connected' : 'warning');
            }
        } catch (error) {
            this.updateStatusIndicator('connectionStatus', 'disconnected');
            this.updateStatusIndicator('twinStatus', 'disconnected');
            this.updateStatusIndicator('memoryStatus', 'warning');
        }
    }

    updateStatusIndicator(elementId, status) {
        const indicator = document.getElementById(elementId);
        if (!indicator) return;
        
        // Remove existing background classes
        indicator.classList.remove('bg-success', 'bg-warning', 'bg-danger', 'bg-info', 'bg-secondary');
        
        // Add appropriate class based on status
        switch(status) {
            case 'connected':
                indicator.classList.add('bg-success');
                break;
            case 'warning':
                indicator.classList.add('bg-warning');
                break;
            case 'disconnected':
                indicator.classList.add('bg-danger');
                break;
            default:
                indicator.classList.add('bg-secondary');
        }
        
        const statusMessages = {
            connected: 'Connected',
            warning: 'Warning', 
            disconnected: 'Disconnected'
        };
        
        indicator.title = statusMessages[status] || status;
    }

    async loadBehavioralInsights() {
        try {
            const response = await fetch('/behavioral-insights/Paresh');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const insights = await response.json();
            this.renderBehavioralInsights(insights);
        } catch (error) {
            console.warn('Failed to load behavioral insights:', error);
            this.renderBehavioralInsights(null);
        }
    }

    renderBehavioralInsights(insights) {
        const container = document.getElementById('behavioralInsights');
        if (!container) return;

        if (!insights) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-chart-line mb-3 text-muted" style="font-size: 2rem;"></i>
                    <p class="text-muted">Behavioral insights not available</p>
                    <small class="text-muted">Connect Chrome extension for behavioral tracking</small>
                </div>
            `;
            return;
        }

        container.innerHTML = `
            <div class="behavioral-panel">
                <div class="behavioral-header mb-3">
                    <h6 class="heading-3 mb-2">
                        <i class="fas fa-brain me-2 text-primary"></i>Today's Behavioral Insights
                    </h6>
                    <div class="status-badge ${insights.focus_time_minutes > 0 ? 'status-connected' : 'status-disconnected'}">
                        ${insights.focus_time_minutes > 0 ? 'Live Tracking' : 'Not Connected'}
                    </div>
                </div>
                
                <div class="insight-grid mb-4">
                    <div class="insight-card">
                        <div class="insight-icon">
                            <i class="fas fa-clock text-primary"></i>
                        </div>
                        <div class="insight-content">
                            <div class="insight-value">${insights.focus_time_minutes}m</div>
                            <div class="insight-label">Focus Time</div>
                        </div>
                    </div>
                    
                    <div class="insight-card">
                        <div class="insight-icon">
                            <i class="fas fa-chart-line text-success"></i>
                        </div>
                        <div class="insight-content">
                            <div class="insight-value">${insights.productivity_score}%</div>
                            <div class="insight-label">Productivity</div>
                        </div>
                    </div>
                    
                    <div class="insight-card">
                        <div class="insight-icon">
                            <i class="fas fa-exchange-alt text-warning"></i>
                        </div>
                        <div class="insight-content">
                            <div class="insight-value">${insights.app_switches}</div>
                            <div class="insight-label">App Switches</div>
                        </div>
                    </div>
                    
                    <div class="insight-card">
                        <div class="insight-icon">
                            <i class="fas fa-fire text-danger"></i>
                        </div>
                        <div class="insight-content">
                            <div class="insight-value">${insights.focus_sessions}</div>
                            <div class="insight-label">Focus Sessions</div>
                        </div>
                    </div>
                </div>
                
                <div class="peak-performance mb-4">
                    <div class="performance-insight">
                        <i class="fas fa-star text-warning me-2"></i>
                        <span class="insight-text">${insights.peak_performance}</span>
                    </div>
                </div>
                
                <div class="behavioral-suggestions">
                    <h6 class="body-small font-weight-bold mb-2">
                        <i class="fas fa-lightbulb me-1 text-warning"></i>Smart Suggestions
                    </h6>
                    ${insights.suggestions.map(suggestion => `
                        <div class="suggestion-item">
                            <div class="suggestion-text">${suggestion}</div>
                        </div>
                    `).join('')}
                </div>
                
                <div class="daily-summary mt-4">
                    <h6 class="body-small font-weight-bold mb-2">
                        <i class="fas fa-calendar-day me-1 text-info"></i>Daily Summary
                    </h6>
                    <div class="summary-stats">
                        <div class="summary-item">
                            <span class="summary-label">Active Time:</span>
                            <span class="summary-value">${insights.daily_summary.total_active_time}</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Work Focus:</span>
                            <span class="summary-value">${insights.daily_summary.work_percentage}%</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Trend:</span>
                            <span class="summary-value">${insights.daily_summary.productivity_trend}</span>
                        </div>
                    </div>
                    
                    ${insights.daily_summary.most_used_apps.length > 0 ? `
                        <div class="top-apps mt-3">
                            <div class="apps-label">Top Apps:</div>
                            <div class="apps-list">
                                ${insights.daily_summary.most_used_apps.slice(0, 3).map(app => `
                                    <span class="app-tag">${app}</span>
                                `).join('')}
                            </div>
                        </div>
                    ` : ''}
                </div>
                
                <div class="sync-controls mt-4">
                    <button class="btn btn-sm btn-outline-primary" onclick="window.twin.syncBehavioralData()">
                        <i class="fas fa-sync-alt me-1"></i>Sync Data
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" onclick="window.twin.refreshBehavioralInsights()">
                        <i class="fas fa-refresh me-1"></i>Refresh
                    </button>
                </div>
            </div>
        `;
    }

    async syncBehavioralData() {
        try {
            const response = await fetch('/sync-behavioral-data', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            
            const result = await response.json();
            
            if (result.status === 'success') {
                this.showSuccess(`Synced ${result.events_processed} behavioral events with Digital Twin`);
                await this.loadBehavioralInsights();
            } else {
                this.showError('Failed to sync behavioral data');
            }
        } catch (error) {
            this.showError('Sync failed: ' + error.message);
        }
    }

    async refreshBehavioralInsights() {
        await this.loadBehavioralInsights();
    }

    async loadAICoaching() {
        try {
            const response = await fetch('/ai-productivity-coaching/Paresh');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const coaching = await response.json();
            this.renderAICoaching(coaching);
        } catch (error) {
            console.warn('Failed to load AI coaching:', error);
            this.renderAICoaching(null);
        }
    }

    renderAICoaching(coaching) {
        const container = document.getElementById('aiCoaching');
        if (!container) return;

        if (!coaching || !coaching.coaching || coaching.coaching.length === 0) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-brain mb-3 text-muted" style="font-size: 2rem;"></i>
                    <p class="text-muted">AI Coaching not available yet</p>
                    <small class="text-muted">Building behavioral patterns for personalized coaching</small>
                </div>
            `;
            return;
        }

        container.innerHTML = `
            <div class="ai-coaching-content">
                <div class="coaching-header mb-3">
                    <h6 class="mb-1">
                        <i class="fas fa-robot me-2 text-primary"></i>AI Productivity Coach
                    </h6>
                    <small class="text-muted">Personalized insights based on your behavioral patterns</small>
                </div>
                
                ${coaching.coaching.map(insight => `
                    <div class="coaching-insight mb-3 p-3 border rounded" style="border-left: 4px solid ${this.getInsightColor(insight.priority)};">
                        <div class="insight-header d-flex justify-content-between align-items-start mb-2">
                            <h6 class="mb-0 text-dark">${insight.title}</h6>
                            <span class="badge badge-${this.getPriorityBadgeClass(insight.priority)}">${insight.priority}</span>
                        </div>
                        <p class="mb-2 text-secondary">${insight.message}</p>
                        
                        ${insight.recommendations && insight.recommendations.length > 0 ? `
                            <div class="recommendations">
                                <small class="text-muted font-weight-bold">Recommendations:</small>
                                <ul class="small mt-1 mb-0">
                                    ${insight.recommendations.map(rec => `<li>${rec}</li>`).join('')}
                                </ul>
                            </div>
                        ` : ''}
                        
                        <div class="insight-meta mt-2 d-flex justify-content-between align-items-center">
                            <small class="text-muted">Confidence: ${(insight.confidence * 100).toFixed(0)}%</small>
                            <small class="text-muted">${insight.type.replace('_', ' ')}</small>
                        </div>
                    </div>
                `).join('')}
                
                <div class="coaching-controls mt-3">
                    <button class="btn btn-sm btn-primary" onclick="window.twin.refreshAICoaching()">
                        <i class="fas fa-sync-alt me-1"></i>Refresh Coaching
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" onclick="window.twin.integrateMemories()">
                        <i class="fas fa-brain me-1"></i>Integrate Memories
                    </button>
                </div>
            </div>
        `;
    }

    async loadProactiveSuggestions() {
        try {
            const response = await fetch('/proactive-suggestions/Paresh');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const suggestions = await response.json();
            this.renderProactiveSuggestions(suggestions);
        } catch (error) {
            console.warn('Failed to load proactive suggestions:', error);
            this.renderProactiveSuggestions(null);
        }
    }

    renderProactiveSuggestions(data) {
        const container = document.getElementById('proactiveSuggestions');
        if (!container) return;

        if (!data || !data.suggestions || data.suggestions.length === 0) {
            container.innerHTML = `
                <div class="text-center py-3">
                    <i class="fas fa-lightbulb mb-2 text-muted"></i>
                    <p class="text-muted small mb-0">No proactive suggestions at this time</p>
                </div>
            `;
            return;
        }

        const currentContext = data.current_context || {};
        
        container.innerHTML = `
            <div class="proactive-suggestions-content">
                <div class="suggestions-header mb-3">
                    <h6 class="mb-1">
                        <i class="fas fa-magic me-2 text-warning"></i>Smart Suggestions
                    </h6>
                    <small class="text-muted">Right now: ${currentContext.day}, ${currentContext.hour}:00 ${currentContext.optimal_focus_time ? '(Peak Focus)' : ''}</small>
                </div>
                
                ${data.suggestions.map(suggestion => `
                    <div class="suggestion-card mb-2 p-3 rounded border" style="border-left: 4px solid ${this.getInsightColor(suggestion.priority)};">
                        <div class="suggestion-header d-flex justify-content-between align-items-start mb-2">
                            <strong class="text-dark">${suggestion.title}</strong>
                            <span class="badge badge-${this.getPriorityBadgeClass(suggestion.priority)}">${suggestion.priority}</span>
                        </div>
                        <p class="mb-2 text-secondary small">${suggestion.message}</p>
                        
                        <div class="suggestion-action mb-2 p-2 bg-light rounded">
                            <strong class="text-primary">Action:</strong> ${suggestion.action}
                            ${suggestion.duration ? `<span class="badge badge-light ml-2">${suggestion.duration}</span>` : ''}
                        </div>
                        
                        <div class="suggestion-meta d-flex justify-content-between align-items-center">
                            <small class="text-muted">Confidence: ${(suggestion.confidence * 100).toFixed(0)}%</small>
                            <button class="btn btn-xs btn-outline-primary" onclick="window.twin.actOnSuggestion('${suggestion.type}')">
                                <i class="fas fa-check me-1"></i>Act Now
                            </button>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    getInsightColor(priority) {
        switch(priority) {
            case 'urgent': return '#f44336';  // Google Red
            case 'high': return '#ff9800';    // Google Orange
            case 'medium': return '#2196f3';  // Google Blue
            case 'low': return '#4caf50';     // Google Green
            default: return '#757575';        // Google Grey
        }
    }

    getPriorityBadgeClass(priority) {
        switch(priority) {
            case 'urgent': return 'danger';
            case 'high': return 'warning';
            case 'medium': return 'info';
            case 'low': return 'success';
            default: return 'secondary';
        }
    }

    async refreshAICoaching() {
        await this.loadAICoaching();
        this.showToast('AI Coaching refreshed', 'success');
    }

    async integrateMemories() {
        try {
            const response = await fetch('/integrate-behavioral-memories/Paresh', {
                method: 'POST'
            });
            const result = await response.json();
            
            if (result.integrated_count > 0) {
                this.showToast(`Integrated ${result.integrated_count} behavioral memories into Digital Twin`, 'success');
                await this.loadAICoaching();
            } else {
                this.showToast('No new memories to integrate', 'info');
            }
        } catch (error) {
            this.showToast('Failed to integrate memories: ' + error.message, 'error');
        }
    }

    async actOnSuggestion(type) {
        this.showToast(`Acting on suggestion: ${type.replace('_', ' ')}`, 'info');
        // Could trigger specific actions based on suggestion type
        setTimeout(() => {
            this.loadProactiveSuggestions();
        }, 2000);
    }

    // Enterprise Document Analysis Features
    async uploadAndAnalyze(file, action) {
        const taskId = this.generateTaskId();
        
        try {
            this.showProcessingStatus(file.name, 'Uploading...');
            
            const formData = new FormData();
            formData.append('file', file);
            formData.append('action', action);
            
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData
            });
            
            if (!response.ok) {
                throw new Error(`Upload failed: ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.task_id) {
                this.processingTasks.set(result.task_id, {
                    filename: file.name,
                    action: action,
                    status: 'processing'
                });
                
                this.showProcessingStatus(file.name, 'Processing...');
                this.pollTaskStatus(result.task_id);
                this.showSuccess(`Document "${file.name}" uploaded successfully`);
            } else {
                throw new Error('No task ID returned');
            }
            
        } catch (error) {
            this.showError(`Upload failed: ${error.message}`);
            this.showProcessingStatus(file.name, 'Failed');
        }
    }
    
    async pollTaskStatus(taskId) {
        const maxAttempts = 60; // 5 minutes with 5-second intervals
        let attempts = 0;
        
        const pollInterval = setInterval(async () => {
            attempts++;
            
            try {
                const response = await fetch(`/task/${taskId}`);
                const status = await response.json();
                
                if (status.status === 'completed') {
                    clearInterval(pollInterval);
                    this.handleTaskCompletion(taskId, status);
                } else if (status.status === 'error') {
                    clearInterval(pollInterval);
                    this.handleTaskError(taskId, status);
                } else if (attempts >= maxAttempts) {
                    clearInterval(pollInterval);
                    this.showError('Processing timeout - please try again');
                } else {
                    // Update progress
                    this.updateProcessingProgress(taskId, status.progress || 0);
                }
            } catch (error) {
                if (attempts >= maxAttempts) {
                    clearInterval(pollInterval);
                    this.showError('Error checking task status');
                }
            }
        }, 5000);
    }
    
    handleTaskCompletion(taskId, status) {
        const task = this.processingTasks.get(taskId);
        if (task) {
            this.showSuccess(`Analysis completed: ${task.filename}`);
            this.displayAnalysisResults(status.result);
            this.addToRecentResults(task.filename, status.result);
            this.processingTasks.delete(taskId);
            this.updateProcessingQueue();
        }
    }
    
    handleTaskError(taskId, status) {
        const task = this.processingTasks.get(taskId);
        if (task) {
            this.showError(`Analysis failed: ${task.filename} - ${status.error_message || 'Unknown error'}`);
            this.processingTasks.delete(taskId);
            this.updateProcessingQueue();
        }
    }
    
    displayAnalysisResults(result) {
        const container = document.getElementById('analysisResults');
        if (!container) return;
        
        let html = '<div class="analysis-result">';
        
        if (result.type === 'document_analysis' || result.type === 'smart_questions' || result.type === 'email_drafting') {
            html += `
                <div class="mb-4">
                    <h6 class="text-primary">Document Summary</h6>
                    <p class="text-secondary">${result.summary || 'No summary available'}</p>
                </div>
                
                ${result.key_points && result.key_points.length > 0 ? `
                    <div class="mb-4">
                        <h6 class="text-primary">Key Points</h6>
                        <ul class="list-unstyled">
                            ${result.key_points.map(point => `<li class="mb-2"><i class="fas fa-check-circle text-success me-2"></i>${point}</li>`).join('')}
                        </ul>
                    </div>
                ` : ''}
                
                ${result.action_items && result.action_items.length > 0 ? `
                    <div class="mb-4">
                        <h6 class="text-primary">Action Items</h6>
                        <div class="row">
                            ${result.action_items.map(item => `
                                <div class="col-md-6 mb-3">
                                    <div class="card border-primary">
                                        <div class="card-body">
                                            <h6 class="card-title">${item.task || item.title || 'Action Item'}</h6>
                                            <p class="card-text small">${item.context || item.description || ''}</p>
                                            <span class="badge bg-${item.priority === 'high' ? 'danger' : item.priority === 'medium' ? 'warning' : 'info'}">${item.priority || 'medium'}</span>
                                            ${item.assignee ? `<div class="small text-muted mt-1">Assigned to: ${item.assignee}</div>` : ''}
                                        </div>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
                
                ${result.questions && result.questions.length > 0 ? `
                    <div class="mb-4">
                        <h6 class="text-primary">Generated Questions</h6>
                        <div class="list-group">
                            ${result.questions.map(q => `
                                <div class="list-group-item">
                                    <strong>${q.question || q}</strong>
                                    ${q.context ? `<br><small class="text-muted">${q.context}</small>` : ''}
                                </div>
                            `).join('')}
                        </div>
                    </div>
                ` : ''}
                
                ${result.type === 'email_drafting' && result.draft ? `
                    <div class="mb-4">
                        <h6 class="text-primary">Email Draft</h6>
                        <div class="card border-info">
                            <div class="card-header bg-info text-white">
                                <strong>To:</strong> ${result.draft.to}<br>
                                <strong>Subject:</strong> ${result.draft.subject}
                            </div>
                            <div class="card-body">
                                <pre class="mb-0" style="white-space: pre-wrap; font-family: inherit;">${result.draft.body}</pre>
                            </div>
                            <div class="card-footer">
                                <span class="badge bg-${result.draft.priority === 'high' ? 'danger' : result.draft.priority === 'medium' ? 'warning' : 'info'}">${result.draft.priority} priority</span>
                                <span class="badge bg-secondary ms-2">${result.draft.tone} tone</span>
                            </div>
                        </div>
                    </div>
                ` : ''}
            `;
        } else if (result.type === 'meeting_processing') {
            html += `
                <div class="mb-4">
                    <h6 class="text-primary">Meeting Analysis</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <h6>My Action Items</h6>
                            <ul class="list-group">
                                ${(result.my_action_items || []).map(item => `
                                    <li class="list-group-item">
                                        <strong>${item.title || 'Action'}</strong><br>
                                        <small>${item.description || ''}</small>
                                    </li>
                                `).join('')}
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <h6>Others' Action Items</h6>
                            <ul class="list-group">
                                ${(result.others_action_items || []).map(item => `
                                    <li class="list-group-item">
                                        <strong>${item.title || 'Action'}</strong><br>
                                        <small>${item.description || ''}</small>
                                    </li>
                                `).join('')}
                            </ul>
                        </div>
                    </div>
                </div>
            `;
        }
        
        html += '</div>';
        container.innerHTML = html;
    }
    
    showProcessingStatus(filename, status) {
        this.showToast(`${filename}: ${status}`, status === 'Failed' ? 'error' : 'info');
    }
    
    updateProcessingProgress(taskId, progress) {
        // Update progress in processing queue if UI element exists
        const progressElement = document.querySelector(`[data-task-id="${taskId}"] .progress-bar`);
        if (progressElement) {
            progressElement.style.width = `${progress}%`;
            progressElement.textContent = `${progress}%`;
        }
    }
    
    loadProcessingQueue() {
        const container = document.getElementById('processingQueue');
        if (!container) return;
        
        if (this.processingTasks.size === 0) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-inbox fa-2x text-muted mb-3"></i>
                    <p class="text-muted">No documents in queue</p>
                    <small class="text-muted">Upload a document to start analysis</small>
                </div>
            `;
            return;
        }
        
        let html = '';
        this.processingTasks.forEach((task, taskId) => {
            html += `
                <div class="processing-item mb-3" data-task-id="${taskId}">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <strong class="small">${task.filename}</strong>
                        <span class="badge bg-primary">${task.status}</span>
                    </div>
                    <div class="progress" style="height: 6px;">
                        <div class="progress-bar" style="width: 0%"></div>
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }
    
    updateProcessingQueue() {
        this.loadProcessingQueue();
    }
    
    loadRecentResults() {
        const container = document.getElementById('recentResults');
        if (!container) return;
        
        // This would typically load from localStorage or server
        const recentResults = this.getRecentResults();
        
        if (recentResults.length === 0) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-chart-line fa-2x text-muted mb-3"></i>
                    <p class="text-muted">No recent analysis</p>
                    <small class="text-muted">Results will appear here after processing</small>
                </div>
            `;
            return;
        }
        
        let html = '';
        recentResults.slice(0, 5).forEach(result => {
            html += `
                <div class="recent-result-item mb-2 p-2 border rounded">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <strong class="small">${result.filename}</strong><br>
                            <small class="text-muted">${result.type}</small>
                        </div>
                        <button class="btn btn-sm btn-outline-primary" onclick="window.twin.viewResult('${result.id}')">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
    }
    
    addToRecentResults(filename, result) {
        const results = this.getRecentResults();
        results.unshift({
            id: this.generateTaskId(),
            filename: filename,
            type: result.type || 'analysis',
            result: result,
            timestamp: new Date().toISOString()
        });
        
        // Keep only last 10 results
        localStorage.setItem('recentResults', JSON.stringify(results.slice(0, 10)));
        this.loadRecentResults();
    }
    
    getRecentResults() {
        try {
            return JSON.parse(localStorage.getItem('recentResults') || '[]');
        } catch {
            return [];
        }
    }
    
    viewResult(resultId) {
        const results = this.getRecentResults();
        const result = results.find(r => r.id === resultId);
        if (result) {
            this.displayAnalysisResults(result.result);
            this.showToast('Analysis loaded', 'success');
        }
    }
    
    generateTaskId() {
        return 'task_' + Math.random().toString(36).substr(2, 9) + Date.now();
    }
    
    async loadBehavioralAnalytics() {
        const container = document.getElementById('behavioralAnalytics');
        if (!container) return;
        
        try {
            const response = await this.fetchWithTimeout('/behavioral-insights/Paresh');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const analytics = await response.json();
            
            container.innerHTML = `
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body text-center">
                                <h4>${analytics.focus_sessions || 0}</h4>
                                <small>Focus Sessions</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <div class="card bg-success text-white">
                            <div class="card-body text-center">
                                <h4>${analytics.productivity_score || 0}%</h4>
                                <small>Productivity Score</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body text-center">
                                <h4>${analytics.focus_time_minutes || 0}m</h4>
                                <small>Focus Time</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <div class="card bg-info text-white">
                            <div class="card-body text-center">
                                <h4>${analytics.work_time_hours || 0}h</h4>
                                <small>Work Time</small>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-4">
                    <h6>Top Applications</h6>
                    <div class="d-flex flex-wrap gap-2">
                        ${(analytics.daily_summary?.most_used_apps || []).map(app => 
                            `<span class="badge bg-secondary">${app}</span>`
                        ).join('')}
                    </div>
                </div>
            `;
            
        } catch (error) {
            console.warn('Failed to load behavioral analytics:', error);
            container.innerHTML = `
                <div class="text-center py-5">
                    <i class="fas fa-exclamation-triangle text-warning fa-2x mb-3"></i>
                    <p class="text-muted">Behavioral analytics temporarily unavailable</p>
                    <small class="text-muted">Chrome extension data integration in progress</small>
                </div>
            `;
        }
    }
    
    showToast(message, type = 'info') {
        const toast = document.getElementById('statusToast');
        const toastBody = toast.querySelector('.toast-body');
        
        // Set message and styling based on type
        toastBody.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fas fa-${type === 'success' ? 'check-circle text-success' : 
                                 type === 'error' ? 'exclamation-triangle text-danger' : 
                                 'info-circle text-info'} me-2"></i>
                ${message}
            </div>
        `;
        
        // Show toast
        const bsToast = new bootstrap.Toast(toast);
        bsToast.show();
    }

    async loadGuidance() {
        try {
            const response = await fetch('/guidance');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const guidance = await response.json();
            this.renderGuidance(guidance);
        } catch (error) {
            console.warn('Failed to load guidance:', error);
            this.renderGuidance({ suggestions: [] });
        }
    }

    renderGuidance(guidance) {
        const container = document.getElementById('guidanceContent');
        if (!container) return;

        if (!guidance.suggestions || guidance.suggestions.length === 0) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-lightbulb mb-3 text-muted" style="font-size: 2rem;"></i>
                    <p class="text-muted">Your AI coach is analyzing your patterns...</p>
                    <small class="text-muted">Start by uploading a document to get personalized recommendations</small>
                </div>
            `;
            return;
        }

        container.innerHTML = guidance.suggestions.map(suggestion => `
            <div class="guidance-suggestion">
                <div class="suggestion-title">${suggestion.title}</div>
                <p class="mb-3">${suggestion.content}</p>
                <div class="suggestion-actions">
                    ${suggestion.actions.map(action => `
                        <button class="btn btn-sm btn-outline-primary me-2" 
                                onclick="executeGuidanceAction('${action.type}', '${action.data}')">
                            <i class="${action.icon} me-1"></i>${action.label}
                        </button>
                    `).join('')}
                </div>
            </div>
        `).join('');
    }

    async loadRecentActivity() {
        try {
            const response = await fetch('/recent-activity');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const activities = await response.json();
            this.renderRecentActivity(activities);
        } catch (error) {
            console.warn('Failed to load recent activity:', error);
            this.renderRecentActivity([]);
        }
    }

    renderRecentActivity(activities) {
        const container = document.getElementById('recentActivity');
        if (!container) return;

        if (activities.length === 0) {
            container.innerHTML = `
                <div class="text-center text-muted py-3">
                    <i class="fas fa-history mb-2"></i>
                    <p class="mb-0">No recent activity</p>
                </div>
            `;
            return;
        }

        container.innerHTML = activities.map(activity => `
            <div class="activity-item" onclick="viewMemory('${activity.id}')">
                <div class="activity-icon" style="background-color: ${this.getActivityColor(activity.type)}">
                    <i class="${this.getActivityIcon(activity.type)}"></i>
                </div>
                <div class="activity-content">
                    <div class="activity-title">${activity.title}</div>
                    <div class="activity-meta">${this.formatTimeAgo(activity.timestamp)}</div>
                </div>
            </div>
        `).join('');
    }

    async loadActiveTasks() {
        try {
            const response = await fetch('/tasks');
            const data = await response.json();
            this.renderActiveTasks(data.tasks || []);
        } catch (error) {
            this.renderActiveTasks([]);
        }
    }

    renderActiveTasks(tasks) {
        const container = document.getElementById('activeTasks');
        if (!container) return;

        const activeTasks = tasks.filter(task => 
            task.status === 'processing' || task.status === 'pending'
        );

        if (activeTasks.length === 0) {
            container.innerHTML = `
                <div class="text-center text-muted py-3">
                    <i class="fas fa-check-circle mb-2"></i>
                    <p class="mb-0">No active tasks</p>
                </div>
            `;
            return;
        }

        container.innerHTML = activeTasks.map(task => `
            <div class="task-item" onclick="showTaskDetails('${task.task_id}')">
                <div class="task-status ${task.status}">
                    <i class="${this.getTaskIcon(task.status)}"></i>
                </div>
                <div class="task-content">
                    <div class="task-title">${task.filename || 'Processing'}</div>
                    <div class="task-progress">${task.progress || 0}% complete</div>
                </div>
            </div>
        `).join('');
    }

    async loadQuickInsights() {
        try {
            const response = await fetch('/insights');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const insights = await response.json();
            this.renderQuickInsights(insights);
        } catch (error) {
            console.warn('Failed to load insights:', error);
            this.renderQuickInsights({});
        }
    }

    renderQuickInsights(insights) {
        const container = document.getElementById('quickInsights');
        if (!container) return;

        const defaultInsights = {
            memories_today: 0,
            tasks_completed: 0,
            productivity_score: 0,
            active_tasks: 0
        };

        const data = { ...defaultInsights, ...insights };

        container.innerHTML = `
            <div class="insight-item">
                <div class="insight-value">${data.memories_today}</div>
                <div class="insight-label">Today's Memories</div>
            </div>
            <div class="insight-item">
                <div class="insight-value">${data.tasks_completed}</div>
                <div class="insight-label">Completed</div>
            </div>
            <div class="insight-item">
                <div class="insight-value">${data.productivity_score}%</div>
                <div class="insight-label">Productivity</div>
            </div>
            <div class="insight-item">
                <div class="insight-value">${data.active_tasks}</div>
                <div class="insight-label">Active Tasks</div>
            </div>
        `;
    }

    async loadMemories() {
        try {
            const response = await fetch('/memories');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const data = await response.json();
            this.memories = data.memories || [];
            this.renderMemories();
        } catch (error) {
            console.error('Failed to load memories:', error);
            this.memories = [];
            this.renderMemories();
        }
    }

    renderMemories() {
        const container = document.getElementById('memoryList');
        if (!container) return;

        // Apply filters
        let filteredMemories = [...this.memories];
        
        const typeFilter = document.getElementById('memoryTypeFilter')?.value;
        const timeFilter = document.getElementById('memoryTimeFilter')?.value;
        const searchTerm = document.getElementById('memorySearch')?.value?.toLowerCase();

        if (typeFilter) {
            filteredMemories = filteredMemories.filter(memory => memory.type === typeFilter);
        }

        if (timeFilter) {
            const now = new Date();
            const filterDate = new Date();
            
            switch (timeFilter) {
                case 'today':
                    filterDate.setHours(0, 0, 0, 0);
                    break;
                case 'week':
                    filterDate.setDate(now.getDate() - 7);
                    break;
                case 'month':
                    filterDate.setMonth(now.getMonth() - 1);
                    break;
            }
            
            filteredMemories = filteredMemories.filter(memory => 
                new Date(memory.timestamp) >= filterDate
            );
        }

        if (searchTerm) {
            filteredMemories = filteredMemories.filter(memory =>
                memory.title.toLowerCase().includes(searchTerm) ||
                memory.content.toLowerCase().includes(searchTerm)
            );
        }

        // Limit to recent 20 for sidebar
        filteredMemories = filteredMemories.slice(0, 20);

        if (filteredMemories.length === 0) {
            container.innerHTML = `
                <div class="text-center text-muted py-3">
                    <i class="fas fa-brain mb-2 d-block"></i>
                    <p class="mb-0 small">No memories found</p>
                    ${this.memories.length > 0 ? '<p class="mb-0 small">Try changing filters</p>' : '<p class="mb-0 small">Process documents to create memories</p>'}
                </div>
            `;
            return;
        }

        container.innerHTML = filteredMemories.map(memory => `
            <div class="memory-item" onclick="viewMemory('${memory.id}')">
                <div class="memory-header">
                    <div class="memory-title">${memory.title}</div>
                    <div class="memory-status status-${memory.status}">
                        <i class="${this.getStatusIcon(memory.status)}"></i>
                    </div>
                </div>
                <div class="memory-content">${memory.content}</div>
                <div class="memory-meta">
                    <span class="memory-type">${this.getActionLabel(memory.type)}</span>
                    <span class="memory-time">${this.formatTimeAgo(memory.timestamp)}</span>
                </div>
                ${memory.details && memory.status === 'completed' ? `
                    <div class="memory-insights">
                        ${memory.details.key_points_count ? `<span class="insight-tag">${memory.details.key_points_count} points</span>` : ''}
                        ${memory.details.action_items_count ? `<span class="insight-tag">${memory.details.action_items_count} actions</span>` : ''}
                        ${memory.details.questions_count ? `<span class="insight-tag">${memory.details.questions_count} questions</span>` : ''}
                    </div>
                ` : ''}
            </div>
        `).join('');
    }

    getStatusIcon(status) {
        const icons = {
            'completed': 'fas fa-check-circle',
            'processing': 'fas fa-spinner fa-spin',
            'pending': 'fas fa-clock',
            'error': 'fas fa-exclamation-circle'
        };
        return icons[status] || 'fas fa-circle';
    }

    getActionLabel(action) {
        const labels = {
            'document_analysis': 'Document',
            'meeting_processing': 'Meeting',
            'email_drafting': 'Email',
            'smart_questions': 'Questions',
            'custom': 'Custom'
        };
        return labels[action] || action;
    }

    async loadStatistics() {
        try {
            const response = await fetch('/statistics');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const stats = await response.json();
            this.renderStatistics(stats);
        } catch (error) {
            console.warn('Failed to load statistics:', error);
            this.renderStatistics({});
        }
    }

    renderStatistics(stats) {
        const container = document.getElementById('statsContainer');
        if (!container) return;

        const overview = stats.overview || {};
        const productivity = stats.productivity_metrics || {};

        container.innerHTML = `
            <div class="stat-item">
                <div class="stat-value">${overview.total_memories || 0}</div>
                <div class="stat-label">Total Memories</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">${productivity.documents_processed || 0}</div>
                <div class="stat-label">Documents</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">${productivity.meetings_processed || 0}</div>
                <div class="stat-label">Meetings</div>
            </div>
            <div class="stat-item">
                <div class="stat-value">${productivity.questions_generated || 0}</div>
                <div class="stat-label">Questions</div>
            </div>
        `;
    }

    setupDragAndDrop() {
        const uploadArea = document.getElementById('uploadArea');
        if (!uploadArea) return;

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, this.preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            uploadArea.addEventListener(eventName, () => uploadArea.classList.add('dragover'), false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, () => uploadArea.classList.remove('dragover'), false);
        });

        uploadArea.addEventListener('drop', (e) => {
            const files = e.dataTransfer.files;
            this.handleFileSelection(files);
        });

        uploadArea.addEventListener('click', () => {
            document.getElementById('fileInput').click();
        });
    }

    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    handleFileSelection(files) {
        const fileList = document.getElementById('fileList');
        const processingOptions = document.getElementById('processingOptions');
        if (!fileList) return;

        fileList.innerHTML = '';
        
        Array.from(files).forEach(file => {
            const fileItem = document.createElement('div');
            fileItem.className = 'file-item premium-file-item';
            fileItem.innerHTML = `
                <div class="file-info">
                    <div class="file-icon">
                        <i class="${this.getFileIcon(file.name)}"></i>
                    </div>
                    <div class="file-details">
                        <div class="file-name">${file.name}</div>
                        <div class="file-meta">
                            <span class="file-size">${this.formatFileSize(file.size)}</span>
                            <span class="file-type">${this.getFileTypeLabel(file.name)}</span>
                        </div>
                    </div>
                </div>
                <div class="file-actions">
                    <button class="btn btn-sm btn-outline-danger" onclick="this.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            fileList.appendChild(fileItem);
        });

        // Show processing options
        if (processingOptions) {
            processingOptions.style.display = 'block';
        }

        // Enable next button
        const nextButton = document.getElementById('wizardNext');
        if (nextButton) {
            nextButton.disabled = false;
            nextButton.innerHTML = '<i class="fas fa-brain me-2"></i>Start AI Analysis';
        }
    }

    async processFiles(action) {
        const files = document.getElementById('fileInput').files;
        if (files.length === 0) return;

        // Move to processing step
        this.setWizardStep(2);

        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            await this.processFile(file, action);
        }

        // Move to results step
        this.setWizardStep(3);
    }

    async processFile(file, action) {
        // Get custom title if provided
        const customTitle = document.getElementById('customTitle')?.value.trim();
        
        const formData = new FormData();
        formData.append('file', file);
        formData.append('action', action);
        if (customTitle) {
            formData.append('custom_title', customTitle);
        }

        try {
            const response = await fetch('/upload', {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            
            if (result.task_id) {
                this.currentTaskId = result.task_id;
                await this.monitorTask(result.task_id);
            }
        } catch (error) {
            console.error('File processing error:', error);
            this.showError('Failed to process file: ' + file.name);
        }
    }

    async monitorTask(taskId) {
        const updateProgress = (task) => {
            // Update progress bar
            const progressBar = document.getElementById('processingProgress');
            const progressPercentage = document.getElementById('progressPercentage');
            
            if (progressBar) {
                progressBar.style.width = `${task.progress || 0}%`;
            }
            if (progressPercentage) {
                progressPercentage.textContent = `${task.progress || 0}%`;
            }

            // Update processing stages
            this.updateProcessingStages(task.progress || 0);

            // Update processing details
            this.updateProcessingDetails(task);

            // Show insights preview if we have results
            if (task.result && task.status === 'completed') {
                this.showInsightsPreview(task.result);
                this.results.set(taskId, task.result); // Store result
            }
        };

        // Poll for task updates
        const pollTask = async () => {
            try {
                const response = await fetch(`/task/${taskId}`);
                if (!response.ok) throw new Error('Task not found');
                
                const task = await response.json();
                updateProgress(task);

                if (task.status === 'completed') {
                    this.showCompletedResult(task);
                    return; // Stop polling
                } else if (task.status === 'error') {
                    this.showError(task.error_message || 'Processing failed');
                    return; // Stop polling
                }

                // Continue polling if still processing
                if (task.status === 'processing' || task.status === 'pending') {
                    setTimeout(pollTask, 1000);
                }
            } catch (error) {
                console.error('Task monitoring error:', error);
                this.showError('Failed to monitor task progress');
            }
        };

        await pollTask();
    }

    updateProcessingStages(progress) {
        const stages = ['upload', 'analysis', 'insights', 'memory'];
        
        stages.forEach((stage, index) => {
            const stageElement = document.getElementById(`stage-${stage}`);
            const stageIcon = stageElement?.querySelector('.stage-icon');
            const connector = stageElement?.nextElementSibling;
            
            if (!stageIcon) return;
            
            const stageProgress = (index + 1) * 25;
            
            if (progress >= stageProgress) {
                stageIcon.className = 'stage-icon completed';
                if (connector && connector.classList.contains('stage-connector')) {
                    connector.classList.add('completed');
                }
            } else if (progress > (index * 25)) {
                stageIcon.className = 'stage-icon processing';
            }
        });
    }

    updateProcessingDetails(task) {
        const details = document.getElementById('processingDetails');
        if (!details) return;

        let statusMessage = '';
        switch (task.status) {
            case 'processing':
                statusMessage = 'AI analyzing content and extracting insights...';
                break;
            case 'completed':
                statusMessage = 'Analysis completed successfully!';
                break;
            case 'error':
                statusMessage = `Processing failed: ${task.error_message || 'Unknown error'}`;
                break;
            default:
                statusMessage = 'Preparing document for analysis...';
        }

        // Add new detail item if status changed
        const lastDetail = details.querySelector('.detail-item:last-child');
        const lastStatus = lastDetail?.textContent || '';
        
        if (!lastStatus.includes(statusMessage)) {
            const detailItem = document.createElement('div');
            detailItem.className = `detail-item ${task.status}`;
            
            const icon = task.status === 'completed' ? 'fas fa-check-circle text-success' :
                        task.status === 'error' ? 'fas fa-times-circle text-danger' :
                        'fas fa-circle-notch fa-spin text-primary';
            
            detailItem.innerHTML = `
                <i class="${icon}"></i>
                <span>${statusMessage}</span>
            `;
            details.appendChild(detailItem);
        }
    }

    showInsightsPreview(result) {
        const preview = document.getElementById('insightsPreview');
        if (!preview) return;

        // Update insight counters
        const keyPointsCount = document.getElementById('keyPointsCount');
        const actionItemsCount = document.getElementById('actionItemsCount');
        const questionsCount = document.getElementById('questionsCount');

        if (keyPointsCount) keyPointsCount.textContent = result.key_points?.length || 0;
        if (actionItemsCount) actionItemsCount.textContent = result.action_items?.length || 0;
        if (questionsCount) questionsCount.textContent = result.questions?.length || 0;

        preview.style.display = 'block';
    }

    showCompletedResult(task) {
        // Move to results step
        this.setWizardStep(3);
        
        // Display full results
        const resultsContainer = document.getElementById('wizardResults');
        if (!resultsContainer || !task.result) return;

        const result = task.result;
        const customTitle = document.getElementById('customTitle')?.value.trim();
        const displayTitle = customTitle || task.filename || 'Analysis Complete';

        resultsContainer.innerHTML = `
            <div class="result-card premium-card">
                <div class="card-header gradient-header">
                    <div class="d-flex align-items-center justify-content-between">
                        <div>
                            <h5 class="mb-1 text-white">
                                <i class="fas fa-sparkles me-2"></i>${displayTitle}
                            </h5>
                            <small class="text-white-50">Analysis completed • ${this.getActionLabel(result.action)}</small>
                        </div>
                        <div class="result-actions">
                            <button class="btn btn-sm btn-outline-light me-2" onclick="window.twin.downloadResult('${task.task_id}')">
                                <i class="fas fa-download me-1"></i>Export
                            </button>
                            <button class="btn btn-sm btn-outline-light" onclick="window.twin.viewInWorkspace('${task.task_id}')">
                                <i class="fas fa-external-link-alt me-1"></i>View
                            </button>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    ${this.renderResultContent(result)}
                </div>
            </div>
        `;

        // Update memories and recent activity
        this.loadMemories();
        this.loadRecentActivity();
    }

    renderResultContent(result) {
        let content = '';

        // Email drafting results
        if (result.type === 'email_drafting' && result.draft) {
            content += `
                <div class="result-section mb-4">
                    <h6 class="heading-3 mb-3">
                        <i class="fas fa-envelope me-2 text-primary"></i>Email Draft
                        ${result.note ? `<span class="badge bg-info ms-2">${result.note}</span>` : ''}
                    </h6>
                    <div class="email-draft-container">
                        <div class="email-field mb-3">
                            <label class="email-label">To:</label>
                            <div class="email-value">${result.draft.to}</div>
                        </div>
                        <div class="email-field mb-3">
                            <label class="email-label">Subject:</label>
                            <div class="email-value font-weight-bold">${result.draft.subject}</div>
                        </div>
                        <div class="email-field mb-3">
                            <label class="email-label">Body:</label>
                            <div class="email-body">${result.draft.body.replace(/\n/g, '<br>')}</div>
                        </div>
                        <div class="email-meta">
                            <span class="badge bg-secondary me-2">Tone: ${result.draft.tone}</span>
                            <span class="badge bg-info">Priority: ${result.draft.priority}</span>
                        </div>
                        <div class="email-actions mt-3">
                            <button class="btn btn-primary btn-sm me-2" onclick="copyEmailDraft('${JSON.stringify(result.draft).replace(/'/g, "\\'")}')">
                                <i class="fas fa-copy me-1"></i>Copy Draft
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" onclick="editEmailDraft('${JSON.stringify(result.draft).replace(/'/g, "\\'")}')">
                                <i class="fas fa-edit me-1"></i>Edit
                            </button>
                        </div>
                    </div>
                </div>
            `;
            
            if (result.original_email) {
                content += `
                    <div class="result-section mb-4">
                        <h6 class="heading-3 mb-3">
                            <i class="fas fa-mail-reply me-2 text-secondary"></i>Original Email
                        </h6>
                        <div class="original-email-content">
                            ${result.original_email.replace(/\n/g, '<br>')}
                        </div>
                    </div>
                `;
            }
            
            return content;
        }

        // Summary section
        if (result.summary) {
            content += `
                <div class="result-section mb-4">
                    <h6 class="heading-3 mb-3">
                        <i class="fas fa-file-alt me-2 text-primary"></i>Summary
                    </h6>
                    <div class="summary-content">
                        ${result.summary}
                    </div>
                </div>
            `;
        }

        // Key Points
        if (result.key_points && result.key_points.length > 0) {
            content += `
                <div class="result-section mb-4">
                    <h6 class="heading-3 mb-3">
                        <i class="fas fa-key me-2 text-primary"></i>Key Points
                        <span class="badge bg-primary ms-2">${result.key_points.length}</span>
                    </h6>
                    <ul class="result-list">
                        ${result.key_points.map(point => `
                            <li>
                                <div class="bullet"></div>
                                <span>${point}</span>
                            </li>
                        `).join('')}
                    </ul>
                </div>
            `;
        }

        // Action Items
        if (result.action_items && result.action_items.length > 0) {
            content += `
                <div class="result-section mb-4">
                    <h6 class="heading-3 mb-3">
                        <i class="fas fa-tasks me-2 text-warning"></i>Action Items
                        <span class="badge bg-warning ms-2">${result.action_items.length}</span>
                    </h6>
                    <div class="action-items-grid">
                        ${result.action_items.map(item => {
                            const task = typeof item === 'object' ? (item.task || 'No description available') : (item || 'No description available');
                            const priority = typeof item === 'object' ? (item.priority || 'medium') : 'medium';
                            
                            return `
                                <div class="action-item-card">
                                    <div class="action-item-content">
                                        <div class="action-task">${task}</div>
                                        <div class="action-priority priority-${priority}">${priority}</div>
                                        ${typeof item === 'object' && item.assignee ? `<div class="action-assignee">Assigned to: ${item.assignee}</div>` : ''}
                                        ${typeof item === 'object' && item.context ? `<div class="action-context">${item.context}</div>` : ''}
                                    </div>
                                </div>
                            `;
                        }).join('')}
                    </div>
                </div>
            `;
        }

        // Questions
        if (result.questions && result.questions.length > 0) {
            content += `
                <div class="result-section mb-4">
                    <h6 class="heading-3 mb-3">
                        <i class="fas fa-question-circle me-2 text-info"></i>Smart Questions
                        <span class="badge bg-info ms-2">${result.questions.length}</span>
                    </h6>
                    <div class="questions-list">
                        ${result.questions.map(question => `
                            <div class="question-item">
                                <i class="fas fa-lightbulb text-warning me-2"></i>
                                <span>${typeof question === 'object' ? question.question : question}</span>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;
        }

        return content || '<p class="text-muted">No detailed results available.</p>';
    }

    viewInWorkspace(taskId) {
        const result = this.results.get(taskId);
        if (!result) return;

        // Switch to results tab and show the result
        const resultsTab = document.getElementById('results-tab');
        const resultsContainer = document.getElementById('resultsContainer');
        
        if (resultsTab) {
            resultsTab.click();
        }
        
        if (resultsContainer) {
            resultsContainer.innerHTML = this.renderResultContent(result);
        }

        // Close modal
        const modal = bootstrap.Modal.getInstance(document.getElementById('smartUploadModal'));
        if (modal) {
            modal.hide();
        }
    }

    downloadResult(taskId) {
        const result = this.results.get(taskId);
        if (!result) return;

        const dataStr = JSON.stringify(result, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});
        
        const downloadLink = document.createElement('a');
        downloadLink.href = URL.createObjectURL(dataBlob);
        downloadLink.download = `analysis-${taskId}.json`;
        downloadLink.click();
    }

    showSmartUpload(action) {
        const modal = new bootstrap.Modal(document.getElementById('smartUploadModal'));
        this.currentAction = action;
        this.setWizardStep(1);
        
        // Update modal title
        const titles = {
            document_analysis: 'Smart Document Analysis',
            meeting_processing: 'Meeting Processing',
            smart_questions: 'Smart Question Generation',
            email_drafting: 'Email Drafting Assistant'
        };
        
        document.getElementById('uploadModalTitle').textContent = titles[action] || 'Smart Processing';
        modal.show();
    }

    showTextProcessor(action) {
        const modal = new bootstrap.Modal(document.getElementById('textProcessorModal'));
        this.currentAction = action;
        
        // Update modal content based on action
        const titles = {
            email_drafting: 'Email Drafting Assistant',
            smart_questions: 'Smart Question Generator'
        };
        
        const labels = {
            email_drafting: 'Enter original email and your response intent (separated by |):',
            smart_questions: 'Enter text to generate smart questions about:'
        };
        
        document.getElementById('textProcessorTitle').textContent = titles[action] || 'Text Processing';
        document.getElementById('textInputLabel').textContent = labels[action] || 'Enter your content:';
        
        modal.show();
    }

    setWizardStep(step) {
        this.wizardStep = step;

        // Update step indicators
        document.querySelectorAll('.step').forEach((stepEl, index) => {
            if (index + 1 <= step) {
                stepEl.classList.add('active');
            } else {
                stepEl.classList.remove('active');
            }
        });

        // Update step content
        document.querySelectorAll('.wizard-step').forEach((stepEl, index) => {
            if (index + 1 === step) {
                stepEl.classList.add('active');
            } else {
                stepEl.classList.remove('active');
            }
        });

        // Update next button
        const nextBtn = document.getElementById('wizardNext');
        if (nextBtn) {
            if (step === 3) {
                nextBtn.textContent = 'Done';
                nextBtn.onclick = () => this.closeModal('smartUploadModal');
            } else {
                nextBtn.textContent = 'Next';
                nextBtn.onclick = () => this.nextWizardStep();
            }
        }
    }

    nextWizardStep() {
        if (this.wizardStep === 1) {
            // Start processing
            this.processFiles(this.currentAction);
        }
    }

    startPeriodicUpdates() {
        // Update recent activity every 30 seconds
        setInterval(() => this.loadRecentActivity(), 30000);
        
        // Update active tasks every 10 seconds
        setInterval(() => this.loadActiveTasks(), 10000);
        
        // Update insights every 5 minutes
        setInterval(() => this.loadQuickInsights(), 300000);
    }

    // Utility functions
    getActivityColor(type) {
        const colors = {
            document_analysis: '#2563eb',
            meeting_processing: '#10b981',
            email_drafting: '#f59e0b',
            smart_questions: '#06b6d4'
        };
        return colors[type] || '#64748b';
    }

    getActivityIcon(type) {
        const icons = {
            document_analysis: 'fas fa-file-alt',
            meeting_processing: 'fas fa-users',
            email_drafting: 'fas fa-envelope',
            smart_questions: 'fas fa-question-circle'
        };
        return icons[type] || 'fas fa-circle';
    }

    getTaskIcon(status) {
        const icons = {
            pending: 'fas fa-clock',
            processing: 'fas fa-spinner',
            completed: 'fas fa-check',
            error: 'fas fa-times'
        };
        return icons[status] || 'fas fa-circle';
    }

    getFileIcon(filename) {
        const ext = filename.split('.').pop().toLowerCase();
        const icons = {
            pdf: 'fas fa-file-pdf',
            docx: 'fas fa-file-word',
            doc: 'fas fa-file-word',
            txt: 'fas fa-file-alt',
            md: 'fas fa-file-code'
        };
        return icons[ext] || 'fas fa-file';
    }

    getFileTypeLabel(filename) {
        const ext = filename.split('.').pop().toLowerCase();
        const labels = {
            'pdf': 'PDF Document',
            'docx': 'Word Document', 
            'doc': 'Word Document',
            'txt': 'Text File',
            'md': 'Markdown'
        };
        return labels[ext] || 'Document';
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 B';
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
    }

    formatTimeAgo(timestamp) {
        const now = new Date();
        const time = new Date(timestamp);
        const diffInSeconds = Math.floor((now - time) / 1000);

        if (diffInSeconds < 60) return 'Just now';
        if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;
        if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;
        return `${Math.floor(diffInSeconds / 86400)}d ago`;
    }

    closeModal(modalId) {
        const modal = bootstrap.Modal.getInstance(document.getElementById(modalId));
        if (modal) modal.hide();
    }

    showError(message) {
        console.error(message);
        alert(message);
    }

    showSuccess(message) {
        console.log(message);
        // Could be enhanced with a toast notification
        alert(message);
    }

    async processText() {
        const textInput = document.getElementById('textInput')?.value;
        if (!textInput) {
            this.showError('Please enter text to process');
            return;
        }
        
        // Process the text based on current action
        if (this.currentAction === 'email_drafting') {
            await this.processEmailDrafting(textInput);
        } else if (this.currentAction === 'smart_questions') {
            await this.processQuestionGeneration(textInput);
        }
    }

    async processEmailDrafting(textInput) {
        try {
            // Show processing status
            this.showTextProcessingStatus('email_drafting');
            
            const response = await fetch('/process-text', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    action: 'email_drafting',
                    content: textInput
                })
            });

            const result = await response.json();
            
            if (result.task_id) {
                // Monitor the task progress
                await this.monitorTextTask(result.task_id);
            } else {
                this.showError('Failed to start email processing');
            }
        } catch (error) {
            this.showError('Failed to process email: ' + error.message);
        }
    }

    async processQuestionGeneration(textInput) {
        try {
            // Show processing status
            this.showTextProcessingStatus('smart_questions');
            
            const response = await fetch('/process-text', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    action: 'smart_questions',
                    content: textInput
                })
            });

            const result = await response.json();
            
            if (result.task_id) {
                // Monitor the task progress
                await this.monitorTextTask(result.task_id);
            } else {
                this.showError('Failed to start question generation');
            }
        } catch (error) {
            this.showError('Failed to generate questions: ' + error.message);
        }
    }

    showTextProcessingStatus(action) {
        const resultsContainer = document.getElementById('textProcessingResults');
        if (!resultsContainer) return;

        const actionLabels = {
            'email_drafting': '✉️ Drafting professional email response...',
            'smart_questions': '🧠 Generating intelligent questions...'
        };

        resultsContainer.innerHTML = `
            <div class="text-processing-status text-center py-4">
                <div class="processing-spinner mb-3">
                    <i class="fas fa-brain fa-2x text-primary fa-pulse"></i>
                </div>
                <h6 class="text-primary mb-2">${actionLabels[action] || 'Processing...'}</h6>
                <p class="text-muted mb-0">Your AI assistant is working on this...</p>
            </div>
        `;
    }

    async monitorTextTask(taskId) {
        const pollTask = async () => {
            try {
                const response = await fetch(`/task/${taskId}`);
                if (!response.ok) throw new Error('Task not found');
                
                const task = await response.json();

                if (task.status === 'completed') {
                    this.displayTextProcessingResults(task.result);
                    this.results.set(taskId, task.result); // Store result
                    return; // Stop polling
                } else if (task.status === 'error') {
                    this.showError(task.error_message || 'Processing failed');
                    return; // Stop polling
                }

                // Continue polling if still processing
                if (task.status === 'processing' || task.status === 'pending') {
                    setTimeout(pollTask, 1000);
                }
            } catch (error) {
                console.error('Task monitoring error:', error);
                this.showError('Failed to monitor task progress');
            }
        };

        await pollTask();
    }

    displayTextProcessingResults(result) {
        const resultsContainer = document.getElementById('textProcessingResults');
        if (!resultsContainer) return;

        resultsContainer.innerHTML = `
            <div class="result-card premium-card">
                <div class="card-header gradient-header">
                    <h5 class="mb-0 text-white">
                        <i class="fas fa-sparkles me-2"></i>Processing Results
                    </h5>
                </div>
                <div class="card-body">
                    ${this.renderResultContent(result)}
                </div>
            </div>
        `;
    }

    async viewMemory(memoryId) {
        try {
            const response = await fetch(`/memory/${memoryId}`);
            if (!response.ok) throw new Error('Memory not found');
            
            const memory = await response.json();
            this.showMemoryDetails(memory);
        } catch (error) {
            this.showError('Failed to load memory: ' + error.message);
        }
    }

    showMemoryDetails(memory) {
        // Switch to memory tab and display the memory
        const memoryTab = document.getElementById('memory-tab');
        const memoryResults = document.getElementById('memoryResults');
        
        if (memoryTab) {
            memoryTab.click();
        }
        
        if (memoryResults) {
            memoryResults.innerHTML = `
                <div class="memory-detail-card premium-card">
                    <div class="card-header gradient-header">
                        <h5 class="mb-0 text-white">
                            <i class="fas fa-brain me-2"></i>${memory.title}
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="memory-meta mb-3">
                            <span class="badge bg-primary me-2">${this.getActionLabel(memory.type)}</span>
                            <span class="text-muted">${this.formatTimeAgo(memory.timestamp)}</span>
                        </div>
                        <div class="memory-content mb-3">
                            ${memory.content}
                        </div>
                        ${memory.result ? this.renderResultContent(memory.result) : ''}
                    </div>
                </div>
            `;
        }
    }

    async searchMemories() {
        const searchTerm = document.getElementById('memorySearchMain')?.value || 
                          document.getElementById('memorySearch')?.value;
        
        if (!searchTerm) {
            await this.loadMemories();
            return;
        }
        
        try {
            const response = await fetch(`/memories/search?q=${encodeURIComponent(searchTerm)}`);
            if (!response.ok) throw new Error('Search failed');
            
            const results = await response.json();
            this.renderSearchResults(results);
        } catch (error) {
            this.showError('Search failed: ' + error.message);
        }
    }

    renderSearchResults(results) {
        const memoryResults = document.getElementById('memoryResults');
        const memoryList = document.getElementById('memoryList');
        
        // Update main memory results if we're on the memory tab
        if (memoryResults) {
            if (results.memories && results.memories.length > 0) {
                memoryResults.innerHTML = results.memories.map(memory => `
                    <div class="memory-search-result" onclick="viewMemory('${memory.id}')">
                        <div class="memory-header">
                            <div class="memory-title">${memory.title}</div>
                            <div class="memory-type">${this.getActionLabel(memory.type)}</div>
                        </div>
                        <div class="memory-content">${memory.content}</div>
                        <div class="memory-meta">
                            <span class="memory-time">${this.formatTimeAgo(memory.timestamp)}</span>
                        </div>
                    </div>
                `).join('');
            } else {
                memoryResults.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-search mb-2 d-block"></i>
                        <p>No memories found matching your search</p>
                    </div>
                `;
            }
        }
        
        // Also update sidebar memory list
        if (memoryList && results.memories) {
            this.memories = results.memories;
            this.renderMemories();
        }
    }

    async clearAllMemories() {
        try {
            const response = await fetch('/memories', {
                method: 'DELETE'
            });
            
            if (!response.ok) throw new Error('Failed to clear memories');
            
            // Refresh all memory-related displays
            await this.loadMemories();
            await this.loadRecentActivity();
            await this.loadQuickInsights();
            
            // Clear any search results
            const memoryResults = document.getElementById('memoryResults');
            if (memoryResults) {
                memoryResults.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-brain mb-2 d-block"></i>
                        <p>All memories cleared</p>
                    </div>
                `;
            }
            
            this.showSuccess('All memories cleared successfully');
        } catch (error) {
            this.showError('Failed to clear memories: ' + error.message);
        }
    }

    filterMemories(searchTerm) {
        // This method is called when typing in memory search
        // Re-render memories with the search filter applied
        this.renderMemories();
    }
}

// Global Functions
function showSmartUpload(action) {
    window.twin.showSmartUpload(action);
}

function showTextProcessor(action) {
    window.twin.showTextProcessor(action);
}

function nextWizardStep() {
    window.twin.nextWizardStep();
}

function processText() {
    window.twin.processText();
}

function viewMemory(memoryId) {
    window.twin.viewMemory(memoryId);
}

function searchMemories() {
    window.twin.searchMemories();
}

function refreshGuidance() {
    window.twin.loadGuidance();
}

function clearAllMemories() {
    if (confirm('Are you sure you want to clear all memories? This action cannot be undone.')) {
        window.twin.clearAllMemories();
    }
}

function executeGuidanceAction(type, data) {
    if (type === 'upload') {
        showSmartUpload(data);
    } else if (type === 'memory') {
        // Switch to memory tab
        document.getElementById('memory-tab')?.click();
    }
}

function copyEmailDraft(draftJson) {
    try {
        const draft = JSON.parse(draftJson);
        const emailText = `To: ${draft.to}\nSubject: ${draft.subject}\n\n${draft.body}`;
        navigator.clipboard.writeText(emailText).then(() => {
            alert('Email draft copied to clipboard!');
        }).catch(() => {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = emailText;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            alert('Email draft copied to clipboard!');
        });
    } catch (error) {
        alert('Failed to copy email draft');
    }
}

function editEmailDraft(draftJson) {
    try {
        const draft = JSON.parse(draftJson);
        const modal = new bootstrap.Modal(document.getElementById('emailEditModal') || createEmailEditModal());
        
        // Populate modal with draft data
        document.getElementById('editEmailTo').value = draft.to;
        document.getElementById('editEmailSubject').value = draft.subject;
        document.getElementById('editEmailBody').value = draft.body;
        
        modal.show();
    } catch (error) {
        alert('Failed to edit email draft');
    }
}

function createEmailEditModal() {
    const modalHtml = `
        <div class="modal fade" id="emailEditModal" tabindex="-1">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Email Draft</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="editEmailTo" class="form-label">To:</label>
                            <input type="email" class="form-control" id="editEmailTo">
                        </div>
                        <div class="mb-3">
                            <label for="editEmailSubject" class="form-label">Subject:</label>
                            <input type="text" class="form-control" id="editEmailSubject">
                        </div>
                        <div class="mb-3">
                            <label for="editEmailBody" class="form-label">Body:</label>
                            <textarea class="form-control" id="editEmailBody" rows="10"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" onclick="copyEditedEmail()">Copy Edited Email</button>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    return document.getElementById('emailEditModal');
}

function copyEditedEmail() {
    const to = document.getElementById('editEmailTo').value;
    const subject = document.getElementById('editEmailSubject').value;
    const body = document.getElementById('editEmailBody').value;
    
    const emailText = `To: ${to}\nSubject: ${subject}\n\n${body}`;
    
    navigator.clipboard.writeText(emailText).then(() => {
        alert('Edited email copied to clipboard!');
        bootstrap.Modal.getInstance(document.getElementById('emailEditModal')).hide();
    }).catch(() => {
        alert('Failed to copy edited email');
    });
    // ========================================
    // COLLABORATION INTELLIGENCE METHODS
    // ========================================

    async initializeCollaborationIntelligence() {
        console.log('🤝 Initializing Collaboration Intelligence...');
        try {
            await this.checkCollaborationApiHealth();
            await this.loadCollaborationData();
            this.startCollaborationPolling();
        } catch (error) {
            console.warn('Collaboration Intelligence initialization failed:', error);
        }
    }

    async checkCollaborationApiHealth() {
        try {
            const response = await this.fetchWithTimeout(`${this.collaborationApiUrl}/health`);
            if (response.ok) {
                const health = await response.json();
                console.log('🟢 Collaboration API healthy:', health);
                return true;
            }
        } catch (error) {
            console.warn('🔴 Collaboration API not available:', error);
            this.renderCollaborationOffline();
            return false;
        }
    }

    async loadCollaborationData() {
        await Promise.all([
            this.loadPlatformStatus(),
            this.loadCollaborationSuggestions(),
            this.loadRecentMessages(),
            this.loadCollaborationAnalytics(),
            this.loadMonitoringConfig()
        ]);
    }

    async loadPlatformStatus() {
        try {
            const response = await this.fetchWithTimeout(`${this.collaborationApiUrl}/platforms/status`);
            if (response.ok) {
                const status = await response.json();
                this.renderPlatformStatus(status);
            }
        } catch (error) {
            console.warn('Failed to load platform status:', error);
        }
    }

    async loadCollaborationSuggestions() {
        try {
            const response = await this.fetchWithTimeout(`${this.collaborationApiUrl}/suggestions/pending`);
            if (response.ok) {
                const data = await response.json();
                this.renderCollaborationSuggestions(data.suggestions);
                this.updateSuggestionsCount(data.count);
            }
        } catch (error) {
            console.warn('Failed to load collaboration suggestions:', error);
        }
    }

    async loadRecentMessages() {
        try {
            const response = await this.fetchWithTimeout(`${this.collaborationApiUrl}/messages/recent?limit=10`);
            if (response.ok) {
                const data = await response.json();
                this.renderRecentMessages(data.messages);
            }
        } catch (error) {
            console.warn('Failed to load recent messages:', error);
        }
    }

    async loadCollaborationAnalytics() {
        try {
            const response = await this.fetchWithTimeout(`${this.collaborationApiUrl}/analytics/summary`);
            if (response.ok) {
                const analytics = await response.json();
                this.renderCollaborationAnalytics(analytics);
            }
        } catch (error) {
            console.warn('Failed to load collaboration analytics:', error);
        }
    }

    async loadMonitoringConfig() {
        try {
            const response = await this.fetchWithTimeout(`${this.collaborationApiUrl}/monitoring/config`);
            if (response.ok) {
                const config = await response.json();
                this.renderMonitoringConfig(config);
            }
        } catch (error) {
            console.warn('Failed to load monitoring config:', error);
        }
    }

    renderPlatformStatus(status) {
        // Update platform status indicators
        const slackStatus = document.getElementById('slackConnectionStatus');
        const teamsStatus = document.getElementById('teamsConnectionStatus');
        
        if (slackStatus) {
            slackStatus.className = `badge ${status.slack.connected ? 'bg-success' : 'bg-danger'}`;
            slackStatus.textContent = status.slack.connected ? 'Connected' : 'Disconnected';
        }
        
        if (teamsStatus) {
            teamsStatus.className = `badge ${status.teams.connected ? 'bg-success' : 'bg-danger'}`;
            teamsStatus.textContent = status.teams.connected ? 'Connected' : 'Disconnected';
        }
    }

    renderCollaborationSuggestions(suggestions) {
        const container = document.getElementById('collaborationSuggestions');
        if (!container) return;

        if (!suggestions || suggestions.length === 0) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-check-circle fa-2x text-success mb-2"></i>
                    <p class="text-muted">No pending suggestions</p>
                    <small class="text-muted">All caught up with team communications!</small>
                </div>
            `;
            return;
        }

        let html = '';
        suggestions.forEach(suggestion => {
            const priorityClass = suggestion.confidence > 0.8 ? 'border-danger' : 
                                suggestion.confidence > 0.6 ? 'border-warning' : 'border-info';
            
            html += `
                <div class="suggestion-card border ${priorityClass} rounded mb-3 p-3">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="suggestion-content flex-grow-1">
                            <h6 class="suggestion-title mb-1">${suggestion.title}</h6>
                            <p class="suggestion-description text-muted small mb-2">${suggestion.description}</p>
                            <div class="suggestion-meta">
                                <span class="badge bg-secondary me-2">${suggestion.type.replace('_', ' ')}</span>
                                <span class="badge bg-primary">${Math.round(suggestion.confidence * 100)}% confidence</span>
                            </div>
                        </div>
                        <div class="suggestion-actions ms-3">
                            <button class="btn btn-success btn-sm me-1" onclick="window.twin.executeSuggestion('${suggestion.id}', true)">
                                <i class="fas fa-check me-1"></i>Execute
                            </button>
                            <button class="btn btn-outline-secondary btn-sm" onclick="window.twin.executeSuggestion('${suggestion.id}', false)">
                                <i class="fas fa-times me-1"></i>Dismiss
                            </button>
                        </div>
                    </div>
                </div>
            `;
        });

        container.innerHTML = html;
    }

    renderRecentMessages(messages) {
        const container = document.getElementById('recentMessages');
        if (!container) return;

        if (!messages || messages.length === 0) {
            container.innerHTML = `
                <div class="text-center py-3">
                    <i class="fas fa-inbox fa-2x text-muted mb-2"></i>
                    <p class="text-muted">No recent messages</p>
                </div>
            `;
            return;
        }

        let html = '';
        messages.slice(0, 5).forEach(msg => {
            const message = msg.message;
            const analysis = msg.analysis;
            
            const urgencyClass = analysis && analysis.priority_score > 7 ? 'border-start border-danger border-3' : '';
            const platformIcon = message.platform === 'slack' ? 'fab fa-slack' : 'fab fa-microsoft';
            
            html += `
                <div class="message-item ${urgencyClass} mb-3 p-2 border rounded">
                    <div class="d-flex justify-content-between align-items-start">
                        <div class="message-content flex-grow-1">
                            <div class="message-header d-flex align-items-center mb-1">
                                <i class="${platformIcon} me-2 text-muted"></i>
                                <strong class="me-2">${message.user}</strong>
                                <small class="text-muted">${message.channel}</small>
                            </div>
                            <p class="message-text small mb-1">${message.text.substring(0, 100)}${message.text.length > 100 ? '...' : ''}</p>
                            ${analysis && analysis.action_items.length > 0 ? `
                                <div class="message-insights">
                                    <small class="text-primary"><i class="fas fa-tasks me-1"></i>${analysis.action_items.length} action items</small>
                                </div>
                            ` : ''}
                        </div>
                        <small class="text-muted">${this.formatTimeAgo(message.timestamp)}</small>
                    </div>
                </div>
            `;
        });

        container.innerHTML = html;
    }

    renderCollaborationAnalytics(analytics) {
        const container = document.getElementById('collaborationAnalytics');
        if (!container) return;

        const summary = analytics.summary;
        const breakdown = analytics.breakdown;

        container.innerHTML = `
            <div class="analytics-summary">
                <div class="row text-center mb-3">
                    <div class="col-6">
                        <div class="stat-number text-primary">${summary.total_messages}</div>
                        <div class="stat-label small">Messages</div>
                    </div>
                    <div class="col-6">
                        <div class="stat-number text-warning">${summary.action_items_identified}</div>
                        <div class="stat-label small">Action Items</div>
                    </div>
                </div>
                <div class="row text-center">
                    <div class="col-6">
                        <div class="stat-number text-info">${summary.questions_raised}</div>
                        <div class="stat-label small">Questions</div>
                    </div>
                    <div class="col-6">
                        <div class="stat-number text-success">${summary.actions_executed}</div>
                        <div class="stat-label small">Executed</div>
                    </div>
                </div>
                ${breakdown.by_urgency ? `
                    <div class="mt-3">
                        <h6 class="small">Priority Breakdown:</h6>
                        <div class="d-flex justify-content-between">
                            <span class="badge bg-danger">${breakdown.by_urgency.high || 0} High</span>
                            <span class="badge bg-warning">${breakdown.by_urgency.medium || 0} Medium</span>
                            <span class="badge bg-info">${breakdown.by_urgency.low || 0} Low</span>
                        </div>
                    </div>
                ` : ''}
            </div>
        `;

        // Update quick stats
        document.getElementById('totalMessages').textContent = summary.total_messages;
        document.getElementById('pendingSuggestions').textContent = summary.suggestions_generated;
        document.getElementById('actionItems').textContent = summary.action_items_identified;
    }

    renderMonitoringConfig(config) {
        const channelSelector = document.getElementById('channelSelector');
        const usersInput = document.getElementById('usersInput');
        const keywordsInput = document.getElementById('keywordsInput');
        
        if (channelSelector && config.channels) {
            Array.from(channelSelector.options).forEach(option => {
                option.selected = config.channels.includes(option.value);
            });
        }
        
        if (usersInput && config.users) {
            usersInput.value = config.users.join(', ');
        }
        
        if (keywordsInput && config.keywords) {
            keywordsInput.value = config.keywords.join(', ');
        }
    }

    updateSuggestionsCount(count) {
        const badge = document.getElementById('suggestionsCount');
        if (badge) {
            badge.textContent = count;
            badge.className = count > 0 ? 'badge bg-warning ms-2' : 'badge bg-secondary ms-2';
        }
    }

    renderCollaborationOffline() {
        const container = document.getElementById('collaborationSuggestions');
        if (container) {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-exclamation-triangle fa-2x text-warning mb-2"></i>
                    <p class="text-muted">Collaboration Intelligence Offline</p>
                    <small class="text-muted">Start the collaboration API server on port 8001</small>
                </div>
            `;
        }
    }

    async executeSuggestion(suggestionId, approved) {
        try {
            const response = await fetch(`${this.collaborationApiUrl}/suggestions/${suggestionId}/execute`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ action_id: suggestionId, approved: approved })
            });

            if (response.ok) {
                const result = await response.json();
                if (approved) {
                    this.showSuccess(`Action executed: ${result.action.title}`);
                } else {
                    this.showSuccess('Suggestion dismissed');
                }
                
                // Reload suggestions
                await this.loadCollaborationSuggestions();
                await this.loadCollaborationAnalytics();
            }
        } catch (error) {
            this.showError('Failed to execute suggestion: ' + error.message);
        }
    }

    async saveCollaborationConfig() {
        const channelSelector = document.getElementById('channelSelector');
        const usersInput = document.getElementById('usersInput');
        const keywordsInput = document.getElementById('keywordsInput');
        const autoCreateTasks = document.getElementById('autoCreateTasks');
        
        const config = {
            channels: Array.from(channelSelector.selectedOptions).map(option => option.value),
            users: usersInput.value.split(',').map(u => u.trim()).filter(u => u),
            keywords: keywordsInput.value.split(',').map(k => k.trim()).filter(k => k),
            auto_actions_enabled: autoCreateTasks.checked,
            platforms: ['slack', 'teams']
        };

        try {
            const response = await fetch(`${this.collaborationApiUrl}/monitoring/config`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            });

            if (response.ok) {
                this.showSuccess('Monitoring configuration saved!');
                await this.loadCollaborationData();
            }
        } catch (error) {
            this.showError('Failed to save configuration: ' + error.message);
        }
    }

    toggleCollaborationConfig() {
        const config = document.getElementById('collaborationConfig');
        if (config) {
            const isVisible = config.style.display !== 'none';
            config.style.display = isVisible ? 'none' : 'block';
        }
    }

    async simulateCollaborationMessage(platform, channel, user, text) {
        try {
            const response = await fetch(`${this.collaborationApiUrl}/dev/simulate-message`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    platform: platform,
                    channel: channel,
                    user: user,
                    text: text
                })
            });

            if (response.ok) {
                const result = await response.json();
                this.showSuccess(`Simulated message from ${user}`);
                await this.loadCollaborationData();
                return result;
            }
        } catch (error) {
            this.showError('Failed to simulate message: ' + error.message);
        }
    }

    startCollaborationPolling() {
        // Poll for new suggestions every 30 seconds
        setInterval(async () => {
            try {
                await this.loadCollaborationSuggestions();
                await this.loadRecentMessages();
            } catch (error) {
                console.warn('Collaboration polling error:', error);
            }
        }, 30000);
    }

    // End of collaboration intelligence methods
}

// Initialize on DOM loaded
document.addEventListener('DOMContentLoaded', () => {
    window.twin = new SmartDigitalTwin();
    console.log('SmartDigitalTwin initialized:', window.twin);
    console.log('processText method available:', typeof window.twin.processText);
});