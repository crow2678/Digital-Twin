version: '3.8'

services:
  # Main Digital Twin App
  webapp:
    build: 
      context: ./web_app
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - WHISPER_API_URL=http://whisper-service:8001
      - COLLABORATION_API_URL=http://collaboration-api:8002
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://admin:dev_password@postgres:5432/digital_twin
    volumes:
      - ./web_app:/app
      - ./web_app/uploads:/app/uploads
    depends_on:
      - whisper-service
      - collaboration-api
      - redis
      - postgres
    restart: unless-stopped

  # Custom Whisper Service (Production-Ready)
  whisper-service:
    build:
      context: ./whisper_service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - MODEL_SIZE=base  # base/small/medium/large
      - BATCH_SIZE=4
      - ENABLE_GPU=false  # Set to true in production with GPU
      - REDIS_URL=redis://redis:6379
    volumes:
      - whisper_models:/app/models
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    restart: unless-stopped

  # Collaboration Intelligence API
  collaboration-api:
    build:
      context: ./
      dockerfile: collaboration.Dockerfile
    ports:
      - "8002:8002"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://admin:dev_password@postgres:5432/digital_twin
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Redis for caching and real-time features
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # PostgreSQL for production data
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: digital_twin
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped

  # Nginx for load balancing and SSL termination
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - webapp
      - whisper-service
      - collaboration-api
    restart: unless-stopped

volumes:
  whisper_models:
  redis_data:
  postgres_data: