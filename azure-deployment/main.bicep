// Azure Production Deployment for Digital Twin with Whisper
@description('Primary location for all resources')\nparam location string = resourceGroup().location\n\n@description('Environment name (dev, staging, prod)')\nparam environment string = 'prod'\n\n@description('Application name prefix')\nparam appName string = 'digitaltwin'\n\n@description('Enable GPU for Whisper processing')\nparam enableGpu bool = false\n\n// Variables\nvar resourceNamePrefix = '${appName}-${environment}'\nvar containerRegistryName = '${replace(resourceNamePrefix, '-', '')}acr'\nvar keyVaultName = '${resourceNamePrefix}-kv'\nvar appInsightsName = '${resourceNamePrefix}-ai'\nvar logAnalyticsName = '${resourceNamePrefix}-logs'\n\n// Log Analytics Workspace\nresource logAnalytics 'Microsoft.OperationalInsights/workspaces@2022-10-01' = {\n  name: logAnalyticsName\n  location: location\n  properties: {\n    sku: {\n      name: 'PerGB2018'\n    }\n    retentionInDays: 30\n  }\n}\n\n// Application Insights\nresource appInsights 'Microsoft.Insights/components@2020-02-02' = {\n  name: appInsightsName\n  location: location\n  kind: 'web'\n  properties: {\n    Application_Type: 'web'\n    WorkspaceResourceId: logAnalytics.id\n  }\n}\n\n// Container Registry\nresource containerRegistry 'Microsoft.ContainerRegistry/registries@2023-01-01-preview' = {\n  name: containerRegistryName\n  location: location\n  sku: {\n    name: 'Standard'\n  }\n  properties: {\n    adminUserEnabled: true\n  }\n}\n\n// Key Vault\nresource keyVault 'Microsoft.KeyVault/vaults@2023-02-01' = {\n  name: keyVaultName\n  location: location\n  properties: {\n    sku: {\n      family: 'A'\n      name: 'standard'\n    }\n    tenantId: subscription().tenantId\n    accessPolicies: []\n    enableRbacAuthorization: true\n  }\n}\n\n// Redis Cache for session management and caching\nresource redisCache 'Microsoft.Cache/redis@2023-04-01' = {\n  name: '${resourceNamePrefix}-redis'\n  location: location\n  properties: {\n    sku: {\n      name: 'Standard'\n      family: 'C'\n      capacity: 1\n    }\n    enableNonSslPort: false\n    minimumTlsVersion: '1.2'\n    redisConfiguration: {\n      'maxmemory-policy': 'allkeys-lru'\n    }\n  }\n}\n\n// PostgreSQL Database\nresource postgresServer 'Microsoft.DBforPostgreSQL/flexibleServers@2023-03-01-preview' = {\n  name: '${resourceNamePrefix}-postgres'\n  location: location\n  sku: {\n    name: 'Standard_B2s'\n    tier: 'Burstable'\n  }\n  properties: {\n    version: '15'\n    administratorLogin: 'dbadmin'\n    administratorLoginPassword: 'TempPassword123!' // TODO: Use Key Vault\n    storage: {\n      storageSizeGB: 128\n    }\n    backup: {\n      backupRetentionDays: 7\n      geoRedundantBackup: 'Disabled'\n    }\n    highAvailability: {\n      mode: 'Disabled'\n    }\n  }\n}\n\n// App Service Plan\nresource appServicePlan 'Microsoft.Web/serverfarms@2022-09-01' = {\n  name: '${resourceNamePrefix}-asp'\n  location: location\n  sku: {\n    name: 'P1v3' // Premium plan for production\n    tier: 'PremiumV3'\n    capacity: 2\n  }\n  kind: 'linux'\n  properties: {\n    reserved: true // Linux\n  }\n}\n\n// Main Web App (Digital Twin Dashboard)\nresource webApp 'Microsoft.Web/sites@2022-09-01' = {\n  name: '${resourceNamePrefix}-webapp'\n  location: location\n  properties: {\n    serverFarmId: appServicePlan.id\n    httpsOnly: true\n    siteConfig: {\n      linuxFxVersion: 'PYTHON|3.11'\n      alwaysOn: true\n      healthCheckPath: '/health'\n      appSettings: [\n        {\n          name: 'WEBSITES_PORT'\n          value: '8080'\n        }\n        {\n          name: 'WHISPER_API_URL'\n          value: 'https://${whisperContainerGroup.name}.${location}.azurecontainer.io:8001'\n        }\n        {\n          name: 'COLLABORATION_API_URL'\n          value: 'https://${collaborationContainerGroup.name}.${location}.azurecontainer.io:8002'\n        }\n        {\n          name: 'REDIS_URL'\n          value: 'rediss://${redisCache.properties.hostName}:6380'\n        }\n        {\n          name: 'DATABASE_URL'\n          value: 'postgresql://dbadmin:TempPassword123!@${postgresServer.properties.fullyQualifiedDomainName}:5432/digitaltwin'\n        }\n        {\n          name: 'APPINSIGHTS_INSTRUMENTATIONKEY'\n          value: appInsights.properties.InstrumentationKey\n        }\n        {\n          name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'\n          value: appInsights.properties.ConnectionString\n        }\n      ]\n    }\n  }\n}\n\n// Whisper Container Instance (Custom Whisper Service)\nresource whisperContainerGroup 'Microsoft.ContainerInstance/containerGroups@2023-05-01' = {\n  name: '${resourceNamePrefix}-whisper'\n  location: location\n  properties: {\n    containers: [\n      {\n        name: 'whisper-service'\n        properties: {\n          image: '${containerRegistry.properties.loginServer}/whisper-service:latest'\n          ports: [\n            {\n              port: 8001\n              protocol: 'TCP'\n            }\n          ]\n          resources: {\n            requests: {\n              cpu: enableGpu ? 4 : 2\n              memoryInGB: enableGpu ? 16 : 8\n            }\n          }\n          environmentVariables: [\n            {\n              name: 'MODEL_SIZE'\n              value: 'base' // or 'small', 'medium' based on needs\n            }\n            {\n              name: 'ENABLE_GPU'\n              value: string(enableGpu)\n            }\n            {\n              name: 'REDIS_URL'\n              value: 'rediss://${redisCache.properties.hostName}:6380'\n            }\n          ]\n        }\n      }\n    ]\n    osType: 'Linux'\n    restartPolicy: 'Always'\n    ipAddress: {\n      type: 'Public'\n      ports: [\n        {\n          port: 8001\n          protocol: 'TCP'\n        }\n      ]\n      dnsNameLabel: '${resourceNamePrefix}-whisper'\n    }\n    imageRegistryCredentials: [\n      {\n        server: containerRegistry.properties.loginServer\n        username: containerRegistry.listCredentials().username\n        password: containerRegistry.listCredentials().passwords[0].value\n      }\n    ]\n  }\n}\n\n// Collaboration API Container Instance\nresource collaborationContainerGroup 'Microsoft.ContainerInstance/containerGroups@2023-05-01' = {\n  name: '${resourceNamePrefix}-collaboration'\n  location: location\n  properties: {\n    containers: [\n      {\n        name: 'collaboration-api'\n        properties: {\n          image: '${containerRegistry.properties.loginServer}/collaboration-api:latest'\n          ports: [\n            {\n              port: 8002\n              protocol: 'TCP'\n            }\n          ]\n          resources: {\n            requests: {\n              cpu: 1\n              memoryInGB: 2\n            }\n          }\n          environmentVariables: [\n            {\n              name: 'REDIS_URL'\n              value: 'rediss://${redisCache.properties.hostName}:6380'\n            }\n            {\n              name: 'DATABASE_URL'\n              value: 'postgresql://dbadmin:TempPassword123!@${postgresServer.properties.fullyQualifiedDomainName}:5432/digitaltwin'\n            }\n          ]\n        }\n      }\n    ]\n    osType: 'Linux'\n    restartPolicy: 'Always'\n    ipAddress: {\n      type: 'Public'\n      ports: [\n        {\n          port: 8002\n          protocol: 'TCP'\n        }\n      ]\n      dnsNameLabel: '${resourceNamePrefix}-collaboration'\n    }\n    imageRegistryCredentials: [\n      {\n        server: containerRegistry.properties.loginServer\n        username: containerRegistry.listCredentials().username\n        password: containerRegistry.listCredentials().passwords[0].value\n      }\n    ]\n  }\n}\n\n// Storage Account for file uploads and blob storage\nresource storageAccount 'Microsoft.Storage/storageAccounts@2023-01-01' = {\n  name: '${replace(resourceNamePrefix, '-', '')}storage'\n  location: location\n  sku: {\n    name: 'Standard_LRS'\n  }\n  kind: 'StorageV2'\n  properties: {\n    accessTier: 'Hot'\n    allowBlobPublicAccess: false\n    minimumTlsVersion: 'TLS1_2'\n  }\n}\n\n// Outputs\noutput webAppUrl string = 'https://${webApp.properties.defaultHostName}'\noutput whisperApiUrl string = 'https://${whisperContainerGroup.properties.ipAddress.fqdn}:8001'\noutput collaborationApiUrl string = 'https://${collaborationContainerGroup.properties.ipAddress.fqdn}:8002'\noutput containerRegistryName string = containerRegistry.name\noutput containerRegistryLoginServer string = containerRegistry.properties.loginServer"